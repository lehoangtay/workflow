@page "/courses/details"

@using Microsoft.EntityFrameworkCore
@using BlazorApps1.Models
@inject IDbContextFactory<BlazorApps1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Courses</h4>
    <hr />
    @if (courses is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@courses.Name</dd>
            <dt class="col-sm-2">Start Date</dt>
            <dd class="col-sm-10">@courses.StartDate.ToShortDateString()</dd>
            <dt class="col-sm-2">End Date</dt>
            <dd class="col-sm-10">@courses.EndDate.ToShortDateString()</dd>
            <dt class="col-sm-2">Semester</dt>
            <dd class="col-sm-10">@courses.Semester?.Name</dd>
            <dt class="col-sm-2">Subject</dt>
            <dd class="col-sm-10">@courses.Subject?.Name</dd>
            <dt class="col-sm-2">Lecture</dt>
            <dd class="col-sm-10">@courses.Lecture?.Name</dd>
        </dl>
        <div>
            <a class="btn btn-success" style="background-color:darkkhaki" href="@($"/courses/edit?id={courses.Id}")">Edit</a>
            <a class="btn btn-success" style="background-color:cadetblue" href="@($"/courses")">Back to List</a>
        </div>
    }
</div>

@code {
    Courses? courses;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        courses = await context.Courses
                              .Include(c => c.Semester)
                              .Include(c => c.Subject)
                              .Include(c => c.Lecture)
                              .FirstOrDefaultAsync(c => c.Id == Id);

        if (courses is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
